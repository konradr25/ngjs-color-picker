{"version":3,"sources":["webpack:///ngjs-color-picker.js","webpack:///webpack/bootstrap 84b58f6c56d52e91d02a","webpack:///./dev/app/app.js","webpack:///external \"angular\"","webpack:///./source/ngjs-color-picker.js","webpack:///./dev/app/app.html"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","_angular","_angular2","AppCtrl","this","customOptions","size","roundCorners","optionsRandom","randomColors","optionsGradient","start","count","step","optionsVertical","horizontal","total","optionsColumn","columns","app","template","controller","controllerAs","MODULE_NAME","directive","require","angular","styling","selector","rules","defaultColors","defaultValues","colors","options","gradient","setInitValues","scope","length","hasOwnProperty","ulCss","css","display","width","height","setColors","customColors","push","getRandomHexColor","validHex","formatToHex","isOkHex","test","interval","shadeColor","toLowerCase","setColumns","indexOfPx","indexOf","parseInt","substr","cssFloat","isOkColumn","columnRound","setRoundedCorners","hzRound","vertRound","setInitialSelectedColor","selectedColor","getHtmlCssStyle","prefix","join","applyCssToHtml","styles","map","element","document","find","prepend","Math","random","toString","slice","hex","index","charAt","color","percent","num","amt","round","R","G","B","restrict","link","getCss","background","pick"],"mappings":"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","file":"ngjs-color-picker.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t__webpack_require__(2);\n\t\n\tvar AppCtrl = function AppCtrl() {\n\t    _classCallCheck(this, AppCtrl);\n\t\n\t    // Set $scope variables here on _this_\n\t    this.customOptions = {\n\t        size: 30,\n\t        roundCorners: true\n\t    };\n\t\n\t    this.optionsRandom = {\n\t        randomColors: 10\n\t    };\n\t\n\t    this.optionsGradient = {\n\t        start: '#BA693E',\n\t        count: 10,\n\t        step: 1\n\t    };\n\t\n\t    this.optionsVertical = {\n\t        horizontal: false,\n\t        total: 5\n\t    };\n\t\n\t    this.optionsColumn = {\n\t        columns: 4,\n\t        roundCorners: true\n\t    };\n\t};\n\t\n\t/* Angular configuration (no need to touch this) */\n\t\n\t\n\tvar app = function app() {\n\t    return {\n\t        template: __webpack_require__(3),\n\t        controller: 'AppCtrl',\n\t        controllerAs: 'app'\n\t    };\n\t};\n\t\n\tvar MODULE_NAME = 'app';\n\t_angular2.default.module(MODULE_NAME, ['ngjsColorPicker']).directive('app', app).controller('AppCtrl', AppCtrl);\n\t\n\texports.default = MODULE_NAME;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"angular\");\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tangular.module('ngjsColorPicker', []).directive('ngjsColorPicker', function () {\n\t    var template = '<ul ng-style=\"ulCss\"> \\\n\t                <li ng-repeat=\"color in colors | limitTo: options.total\" \\\n\t                    ng-class=\"{ \\\n\t                    selectedColor: (color===selectedColor), \\\n\t                    hRDF: $first&&hzRound, \\\n\t                    hRDL: $last&&hzRound, \\\n\t                    vRDF: $first&&vertRound, \\\n\t                    vRDL: $last&&vertRound, \\\n\t                    tlRound: $first&&columnRound, \\\n\t                    trRound: $index==(options.columns-1)&&columnRound, \\\n\t                    brRound: $last&&columnRound, \\\n\t                    blRound: $index==(colors.length-options.columns)&&columnRound \\\n\t                    }\" \\\n\t                    ng-click=\"pick(color)\" \\\n\t                    ng-attr-style=\"background-color:{{color}};\" \\\n\t                    ng-style=\"getCss(color)\"> \\\n\t                    </li>\\\n\t                </ul>';\n\t\n\t    var styling = [{\n\t        selector: 'ul',\n\t        rules: ['padding: 0', 'outline: none', 'list-style-type: none']\n\t    }, {\n\t        selector: 'li',\n\t        rules: ['padding: 0', 'margin: 0', 'box-sizing: border-box', 'outline: none']\n\t    }, {\n\t        selector: 'li.selectedColor',\n\t        rules: ['border: 1px solid #333']\n\t    }, {\n\t        selector: 'li.hRDF',\n\t        rules: ['border-radius: 5px 0 0 5px']\n\t    }, {\n\t        selector: 'li.hRDL',\n\t        rules: ['border-radius: 0 5px 5px 0']\n\t    }, {\n\t        selector: 'li.vRDF',\n\t        rules: ['border-radius: 5px 5px 0 0']\n\t    }, {\n\t        selector: 'li.vRDL',\n\t        rules: ['border-radius: 0 0 5px 5px']\n\t    }, {\n\t        selector: 'li.tlRound',\n\t        rules: ['border-radius: 5px 0 0 0']\n\t    }, {\n\t        selector: 'li.trRound',\n\t        rules: ['border-radius: 0 5px 0 0;']\n\t    }, {\n\t        selector: 'li.brRound',\n\t        rules: ['border-radius: 0 0 5px 0;']\n\t    }, {\n\t        selector: 'li.blRound',\n\t        rules: ['border-radius: 0 0 0 5px;']\n\t    }];\n\t\n\t    var defaultColors = ['#7bd148', '#5484ed', '#a4bdfc', '#46d6db', '#7ae7bf', '#51b749', '#fbd75b', '#ffb878', '#ff887c', '#dc2127', '#dbadff', '#e1e1e1'];\n\t\n\t    var defaultValues = {\n\t        colors: defaultColors,\n\t        options: {\n\t            size: 20,\n\t            columns: null,\n\t            randomColors: null\n\t        },\n\t        gradient: null\n\t    };\n\t\n\t    var setInitValues = function setInitValues(scope) {\n\t        scope.colors = defaultColors;\n\t        scope.options = scope.options || {};\n\t        scope.options.size = scope.options.size || defaultValues.options.size;\n\t        scope.options.columns = scope.options.columns || defaultValues.options.columns;\n\t        scope.options.randomColors = scope.options.randomColors || defaultValues.options.randomColors;\n\t        scope.options.total = scope.options.total || scope.colors.length;\n\t        scope.options.horizontal = scope.options.hasOwnProperty('horizontal') ? scope.options.horizontal : true;\n\t        scope.options.roundCorners = scope.options.hasOwnProperty('roundCorners') ? scope.options.roundCorners : false;\n\t        scope.gradient = scope.gradient || defaultValues.gradient;\n\t\n\t        scope.ulCss = {};\n\t        scope.css = {};\n\t        scope.css.display = scope.options.horizontal ? 'inline-block' : 'block';\n\t        scope.css.width = scope.css.height = scope.options.size + 'px';\n\t    };\n\t\n\t    var setColors = function setColors(scope) {\n\t        if (!!scope.customColors) {\n\t            scope.colors = scope.customColors;\n\t        } else if (scope.options && !!scope.options.randomColors) {\n\t            if (scope.options.randomColors > 0) {\n\t                scope.colors = [];\n\t                var randomColors = scope.options.randomColors;\n\t                while (randomColors !== 0) {\n\t                    scope.colors.push(getRandomHexColor());\n\t                    randomColors--;\n\t                }\n\t            } else {\n\t                // TODO: Handle this\n\t                // Random colors array is empty\n\t            }\n\t        } else if (!!scope.gradient) {\n\t            // If step === 0        => nothing will happen.\n\t            // If step === 1        => it will add 3 shades to all\n\t            //                         colors (2.55 shades per 1%, rounded)\n\t            var validHex = formatToHex(scope.gradient.start);\n\t            var isOkHex = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(validHex);\n\t            if (isOkHex) {\n\t                scope.colors = [];\n\t                var count = scope.gradient.hasOwnProperty('count') ? scope.gradient.count : 10;\n\t                var interval = scope.gradient.hasOwnProperty('step') ? scope.gradient.step : 1;\n\t                while (count !== 0) {\n\t                    scope.colors.push(shadeColor(scope.colors.length === 0 ? validHex : scope.colors[scope.colors.length - 1], interval));\n\t                    interval += scope.gradient.step;\n\t                    count--;\n\t\n\t                    // If black or white - stop generating more colors\n\t                    if (scope.colors[scope.colors.length - 1].toLowerCase() === '#ffffff' || scope.colors[scope.colors.length - 1] === '#000000') count = 0;\n\t                }\n\t            } else {\n\t                // TODO: Handle this\n\t                // Hex is not valid\n\t            }\n\t        }\n\t    };\n\t\n\t    var setColumns = function setColumns(scope) {\n\t        // Uneven amount of columns     => no round corners\n\t        //                              => horizontal or vertical has no effect\n\t        var indexOfPx = scope.css.width.indexOf('p');\n\t        scope.ulCss.width = scope.options.columns * parseInt(scope.css.width.substr(0, indexOfPx), 10) + 'px';\n\t        scope.ulCss.height = scope.options.size * (scope.colors.length / scope.options.columns) + 'px';\n\t        scope.css.cssFloat = 'left';\n\t\n\t        // Set rounded corners\n\t        var isOkColumn = scope.colors.length % scope.options.columns === 0;\n\t        scope.columnRound = isOkColumn && scope.options.columns && scope.options.roundCorners;\n\t    };\n\t\n\t    var setRoundedCorners = function setRoundedCorners(scope) {\n\t        scope.hzRound = scope.options.horizontal && scope.options.roundCorners && !scope.options.columns;\n\t        scope.vertRound = !scope.options.horizontal && scope.options.roundCorners && !scope.options.columns;\n\t    };\n\t\n\t    var setInitialSelectedColor = function setInitialSelectedColor(scope) {\n\t        scope.selectedColor = scope.selectedColor || scope.colors[0];\n\t    };\n\t\n\t    var getHtmlCssStyle = function getHtmlCssStyle(selector, rules) {\n\t        var prefix = 'ngjs-color-picker';\n\t        return prefix + ' ' + selector + ' {' + rules.join(';') + '}';\n\t    };\n\t\n\t    var applyCssToHtml = function applyCssToHtml() {\n\t        var styles = styling.map(function (element) {\n\t            return getHtmlCssStyle(element.selector, element.rules);\n\t        });\n\t\n\t        angular.element(document).find('head').prepend('<style type=\"text/css\">' + styles.join(' ') + '</style>');\n\t    };\n\t\n\t    /* Util functions */\n\t    var getRandomHexColor = function getRandomHexColor() {\n\t        return '#' + (Math.random().toString(16) + '000000').slice(2, 8);\n\t    };\n\t\n\t    var formatToHex = function formatToHex(hex) {\n\t        var index = +(hex.charAt(0) === '#');\n\t        return '#' + hex.substr(index).toLowerCase();\n\t    };\n\t\n\t    var shadeColor = function shadeColor(color, percent) {\n\t        var num = parseInt(color.slice(1), 16),\n\t            amt = Math.round(2.55 * percent),\n\t            R = (num >> 16) + amt,\n\t            G = (num >> 8 & 0x00FF) + amt,\n\t            B = (num & 0x0000FF) + amt;\n\t        return '#' + (0x1000000 + (R < 255 ? R < 1 ? 0 : R : 255) * 0x10000 + (G < 255 ? G < 1 ? 0 : G : 255) * 0x100 + (B < 255 ? B < 1 ? 0 : B : 255)).toString(16).slice(1);\n\t    };\n\t\n\t    return {\n\t        scope: {\n\t            selectedColor: '=?',\n\t            customColors: '=?',\n\t            options: '=?',\n\t            gradient: '=?'\n\t        },\n\t        restrict: 'E',\n\t        template: template,\n\t        link: function link(scope) {\n\t            // element, attr\n\t\n\t            setInitValues(scope);\n\t            setColors(scope);\n\t            setInitialSelectedColor(scope);\n\t            setRoundedCorners(scope);\n\t            applyCssToHtml();\n\t\n\t            if (!!scope.options.columns) {\n\t                setColumns(scope);\n\t            }\n\t\n\t            scope.getCss = function (color) {\n\t                scope.css.background = color;\n\t                return scope.css;\n\t            };\n\t\n\t            scope.pick = function (color) {\n\t                scope.selectedColor = color;\n\t            };\n\t        }\n\t    };\n\t});\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<h2>Basic usage example</h2>\\n<ngjs-color-picker selected-color=\\\"app.selected\\\"></ngjs-color-picker>\\n<input type=\\\"text\\\" ng-model=\\\"app.selected\\\">\\n<br/>\\n<br/>\\n\\n<h2>Example with larger size and round corners</h2>\\n<ngjs-color-picker selected-color=\\\"app.selectedColor\\\" options=\\\"app.customOptions\\\"></ngjs-color-picker>\\n<input type=\\\"text\\\" ng-model=\\\"app.selectedColor\\\">\\n<br/>\\n<br/>\\n\\n<h2>Example with random colors</h2>\\n<ngjs-color-picker selected-color=\\\"app.selectedColorRandom\\\" options=\\\"app.optionsRandom\\\"></ngjs-color-picker>\\n<input type=\\\"text\\\" ng-model=\\\"app.selectedColorRandom\\\">\\n<br/>\\n<br/>\\n\\n<h2>Example with gradient</h2>\\n<ngjs-color-picker selected-color=\\\"app.selectedColorGradient\\\" gradient=\\\"app.optionsGradient\\\"></ngjs-color-picker>\\n<input type=\\\"text\\\" ng-model=\\\"app.selectedColorGradient\\\">\\n<br/>\\n<br/>\\n\\n<h2>Example with vertical color picker</h2>\\n<ngjs-color-picker selected-color=\\\"app.selectedColorVert\\\" options=\\\"app.optionsVertical\\\"></ngjs-color-picker>\\n<input type=\\\"text\\\" ng-model=\\\"app.selectedColorVert\\\">\\n<br/>\\n<br/>\\n\\n<h2>Example with columns defined</h2>\\n<ngjs-color-picker selected-color=\\\"app.selectedColorColumn\\\" options=\\\"app.optionsColumn\\\"></ngjs-color-picker>\\n<input type=\\\"text\\\" ng-model=\\\"app.selectedColorColumn\\\">\\n<br/>\\n<br/>\\n\"\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// ngjs-color-picker.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 84b58f6c56d52e91d02a","import angular from 'angular';\nrequire('./ngjs-color-picker');\n\nclass AppCtrl {\n    constructor() {\n\n        // Set $scope variables here on _this_\n        this.customOptions = {\n            size: 30,\n            roundCorners: true\n        };\n\n        this.optionsRandom = {\n            randomColors: 10\n        };\n\n        this.optionsGradient = {\n            start: '#BA693E',\n            count: 10,\n            step: 1\n        };\n\n        this.optionsVertical = {\n            horizontal: false,\n            total: 5\n        };\n\n        this.optionsColumn = {\n            columns: 4,\n            roundCorners: true\n        };\n    }\n}\n\n/* Angular configuration (no need to touch this) */\nlet app = () => {\n    return {\n        template: require('./app.html'),\n        controller: 'AppCtrl',\n        controllerAs: 'app'\n    }\n};\n\nconst MODULE_NAME = 'app';\nangular.module(MODULE_NAME, ['ngjsColorPicker'])\n    .directive('app', app)\n    .controller('AppCtrl', AppCtrl);\n\nexport default MODULE_NAME;\n\n\n\n// WEBPACK FOOTER //\n// ./dev/app/app.js","module.exports = require(\"angular\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"angular\"\n// module id = 1\n// module chunks = 0","'use strict';\n\nangular.module('ngjsColorPicker', [])\n    .directive('ngjsColorPicker', function() {\n        var template =\n            '<ul ng-style=\"ulCss\"> \\\n                <li ng-repeat=\"color in colors | limitTo: options.total\" \\\n                    ng-class=\"{ \\\n                    selectedColor: (color===selectedColor), \\\n                    hRDF: $first&&hzRound, \\\n                    hRDL: $last&&hzRound, \\\n                    vRDF: $first&&vertRound, \\\n                    vRDL: $last&&vertRound, \\\n                    tlRound: $first&&columnRound, \\\n                    trRound: $index==(options.columns-1)&&columnRound, \\\n                    brRound: $last&&columnRound, \\\n                    blRound: $index==(colors.length-options.columns)&&columnRound \\\n                    }\" \\\n                    ng-click=\"pick(color)\" \\\n                    ng-attr-style=\"background-color:{{color}};\" \\\n                    ng-style=\"getCss(color)\"> \\\n                    </li>\\\n                </ul>';\n\n        var styling = [\n            {\n                selector: 'ul',\n                rules: [\n                    'padding: 0',\n                    'outline: none',\n                    'list-style-type: none'\n                ]\n            },\n            {\n                selector: 'li',\n                rules: [\n                    'padding: 0',\n                    'margin: 0',\n                    'box-sizing: border-box',\n                    'outline: none'\n                ]\n            },\n            {\n                selector: 'li.selectedColor',\n                rules: [\n                    'border: 1px solid #333'\n                ]\n            },\n            {\n                selector: 'li.hRDF',\n                rules: [\n                    'border-radius: 5px 0 0 5px'\n                ]\n            },\n            {\n                selector: 'li.hRDL',\n                rules: [\n                    'border-radius: 0 5px 5px 0'\n                ]\n            },\n            {\n                selector: 'li.vRDF',\n                rules: [\n                    'border-radius: 5px 5px 0 0'\n                ]\n            },\n            {\n                selector: 'li.vRDL',\n                rules: [\n                    'border-radius: 0 0 5px 5px'\n                ]\n            },\n            {\n                selector: 'li.tlRound',\n                rules: [\n                    'border-radius: 5px 0 0 0'\n                ]\n            },\n            {\n                selector: 'li.trRound',\n                rules: [\n                    'border-radius: 0 5px 0 0;'\n                ]\n            },\n            {\n                selector: 'li.brRound',\n                rules: [\n                    'border-radius: 0 0 5px 0;'\n                ]\n            },\n            {\n                selector: 'li.blRound',\n                rules: [\n                    'border-radius: 0 0 0 5px;'\n                ]\n            }\n        ];\n\n        var defaultColors =  [\n            '#7bd148',\n            '#5484ed',\n            '#a4bdfc',\n            '#46d6db',\n            '#7ae7bf',\n            '#51b749',\n            '#fbd75b',\n            '#ffb878',\n            '#ff887c',\n            '#dc2127',\n            '#dbadff',\n            '#e1e1e1'\n        ];\n\n        var defaultValues = {\n            colors: defaultColors,\n            options: {\n                size: 20,\n                columns: null,\n                randomColors: null\n            },\n            gradient: null\n        };\n\n        var setInitValues = function(scope) {\n            scope.colors = defaultColors;\n            scope.options = scope.options || {};\n            scope.options.size = scope.options.size || defaultValues.options.size;\n            scope.options.columns = scope.options.columns || defaultValues.options.columns;\n            scope.options.randomColors =\n                scope.options.randomColors || defaultValues.options.randomColors;\n            scope.options.total = scope.options.total || scope.colors.length;\n            scope.options.horizontal =\n                (scope.options.hasOwnProperty('horizontal') ? scope.options.horizontal : true);\n            scope.options.roundCorners =\n                (scope.options.hasOwnProperty('roundCorners') ?\n                    scope.options.roundCorners : false);\n            scope.gradient = scope.gradient || defaultValues.gradient;\n\n            scope.ulCss = {};\n            scope.css = {};\n            scope.css.display = (scope.options.horizontal ? 'inline-block' : 'block');\n            scope.css.width = scope.css.height = scope.options.size + 'px';\n        };\n\n        var setColors = function(scope) {\n            if (!!scope.customColors) {\n                scope.colors = scope.customColors;\n            } else if (scope.options && !!scope.options.randomColors) {\n                if (scope.options.randomColors > 0) {\n                    scope.colors = [];\n                    var randomColors = scope.options.randomColors;\n                    while (randomColors !== 0) {\n                        scope.colors.push(getRandomHexColor());\n                        randomColors--;\n                    }\n                } else {\n                    // TODO: Handle this\n                    // Random colors array is empty\n                }\n            } else if (!!scope.gradient) {\n                // If step === 0        => nothing will happen.\n                // If step === 1        => it will add 3 shades to all\n                //                         colors (2.55 shades per 1%, rounded)\n                var validHex = formatToHex(scope.gradient.start);\n                var isOkHex = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(validHex);\n                if (isOkHex) {\n                    scope.colors = [];\n                    var count =\n                        (scope.gradient.hasOwnProperty('count') ? scope.gradient.count : 10);\n                    var interval =\n                        (scope.gradient.hasOwnProperty('step') ? scope.gradient.step : 1);\n                    while (count !== 0) {\n                        scope.colors.push(shadeColor(scope.colors.length === 0 ?\n                            validHex : scope.colors[scope.colors.length - 1], interval));\n                        interval+=scope.gradient.step;\n                        count--;\n\n                        // If black or white - stop generating more colors\n                        if (scope.colors[scope.colors.length - 1].toLowerCase() === '#ffffff' ||\n                            scope.colors[scope.colors.length - 1] === '#000000')\n                            count = 0;\n                    }\n                } else {\n                    // TODO: Handle this\n                    // Hex is not valid\n                }\n            }\n        };\n\n        var setColumns = function(scope) {\n            // Uneven amount of columns     => no round corners\n            //                              => horizontal or vertical has no effect\n            var indexOfPx = scope.css.width.indexOf('p');\n            scope.ulCss.width = scope.options.columns *\n                (parseInt(scope.css.width.substr(0, indexOfPx), 10)) + 'px';\n            scope.ulCss.height =\n                scope.options.size * (scope.colors.length / scope.options.columns) + 'px';\n            scope.css.cssFloat = 'left';\n\n            // Set rounded corners\n            var isOkColumn = (scope.colors.length % scope.options.columns) === 0;\n            scope.columnRound =\n                (isOkColumn && scope.options.columns && scope.options.roundCorners);\n        };\n\n        var setRoundedCorners = function(scope) {\n            scope.hzRound = scope.options.horizontal && scope.options.roundCorners &&\n                !scope.options.columns;\n            scope.vertRound = !scope.options.horizontal && scope.options.roundCorners &&\n                !scope.options.columns;\n        };\n\n        var setInitialSelectedColor = function(scope) {\n            scope.selectedColor = scope.selectedColor || scope.colors[0];\n        };\n\n        var getHtmlCssStyle = function(selector, rules) {\n            var prefix = 'ngjs-color-picker';\n            return prefix + ' ' + selector + ' {' + rules.join(';') + '}';\n        };\n\n        var applyCssToHtml = function() {\n            var styles = styling.map(function(element) {\n                return getHtmlCssStyle(element.selector, element.rules);\n            });\n\n            angular.element(document).find('head').prepend(\n                '<style type=\"text/css\">' + styles.join(' ') + '</style>');\n        };\n\n        /* Util functions */\n        var getRandomHexColor = function() {\n            return ('#' + (Math.random().toString(16) + '000000').slice(2, 8));\n        };\n\n        var formatToHex = function(hex) {\n            var index = +(hex.charAt(0) === '#');\n            return '#' + hex.substr(index).toLowerCase();\n        };\n\n        var shadeColor = function(color, percent) {\n            var num = parseInt(color.slice(1), 16),\n                amt = Math.round(2.55 * percent),\n                R = (num >> 16) + amt,\n                G = (num >> 8 & 0x00FF) + amt,\n                B = (num & 0x0000FF) + amt;\n            return '#' + (0x1000000 + (R<255?R<1?0:R:255)*0x10000 +\n                (G<255?G<1?0:G:255)*0x100 + (B<255?B<1?0:B:255)).toString(16).slice(1);\n        };\n\n        return {\n            scope: {\n                selectedColor: '=?',\n                customColors: '=?',\n                options: '=?',\n                gradient: '=?'\n            },\n            restrict: 'E',\n            template: template,\n            link: function(scope) { // element, attr\n\n                setInitValues(scope);\n                setColors(scope);\n                setInitialSelectedColor(scope);\n                setRoundedCorners(scope);\n                applyCssToHtml();\n\n                if (!!scope.options.columns) {\n                    setColumns(scope);\n                }\n\n                scope.getCss = function(color) {\n                    scope.css.background = color;\n                    return scope.css;\n                };\n\n                scope.pick = function(color) {\n                    scope.selectedColor = color;\n                };\n\n            }\n        };\n\n    });\n\n\n\n// WEBPACK FOOTER //\n// ./source/ngjs-color-picker.js","module.exports = \"<h2>Basic usage example</h2>\\n<ngjs-color-picker selected-color=\\\"app.selected\\\"></ngjs-color-picker>\\n<input type=\\\"text\\\" ng-model=\\\"app.selected\\\">\\n<br/>\\n<br/>\\n\\n<h2>Example with larger size and round corners</h2>\\n<ngjs-color-picker selected-color=\\\"app.selectedColor\\\" options=\\\"app.customOptions\\\"></ngjs-color-picker>\\n<input type=\\\"text\\\" ng-model=\\\"app.selectedColor\\\">\\n<br/>\\n<br/>\\n\\n<h2>Example with random colors</h2>\\n<ngjs-color-picker selected-color=\\\"app.selectedColorRandom\\\" options=\\\"app.optionsRandom\\\"></ngjs-color-picker>\\n<input type=\\\"text\\\" ng-model=\\\"app.selectedColorRandom\\\">\\n<br/>\\n<br/>\\n\\n<h2>Example with gradient</h2>\\n<ngjs-color-picker selected-color=\\\"app.selectedColorGradient\\\" gradient=\\\"app.optionsGradient\\\"></ngjs-color-picker>\\n<input type=\\\"text\\\" ng-model=\\\"app.selectedColorGradient\\\">\\n<br/>\\n<br/>\\n\\n<h2>Example with vertical color picker</h2>\\n<ngjs-color-picker selected-color=\\\"app.selectedColorVert\\\" options=\\\"app.optionsVertical\\\"></ngjs-color-picker>\\n<input type=\\\"text\\\" ng-model=\\\"app.selectedColorVert\\\">\\n<br/>\\n<br/>\\n\\n<h2>Example with columns defined</h2>\\n<ngjs-color-picker selected-color=\\\"app.selectedColorColumn\\\" options=\\\"app.optionsColumn\\\"></ngjs-color-picker>\\n<input type=\\\"text\\\" ng-model=\\\"app.selectedColorColumn\\\">\\n<br/>\\n<br/>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./dev/app/app.html\n// module id = 3\n// module chunks = 0"],"sourceRoot":""}